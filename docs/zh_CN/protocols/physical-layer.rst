.. 物理层
    FileName:   physical-layer.rst
    Author:     Fasion Chan
    Created:    2018-01-28 11:45:04
    @contact:   fasionchan@gmail.com
    @version:   $Id$

    Description:

    Changelog:

.. meta::
   :description lang=zh: 通过两服务器通讯问题引入物理层的讨论，物理层主要承担比特流传输的职责。
   :keywords: 物理层

.. _physical-layer:

======
物理层
======

我们以一个非常简单的例子开始：

两服务器通讯问题
================

.. figure:: /_images/protocols/physical-layer/3fed1fb3ce11f3e73c606d99dd37272c.png

    *两服务器通讯问题*

如上图，有两台服务器，分别是 ``Server 1`` 和 ``Server 2`` 。
我们先做一个假设：计算机网络现在还没有被发明出来，
作为计算机科学家的你，想在这两台服务器间传递数据，怎么办？

这时，你可能会想到，用一根电缆把两台服务器连接起来：

.. figure:: /_images/protocols/physical-layer/6bb1c239ba0f6fa29d1dbee74b5d4448.png

    *通过电缆实现通讯*

物理课大家都学过，电线可以分为 **低电平** 和 **高电平** 。
电平可以高低变化，这样不就可以传递信息了么：
``Server 1`` 控制电缆电平的高低， ``Server 2`` 检测电平的高低，这样就实现了 ``Server 1`` 往 ``Server 2`` 发送数据啦！

更进一步，可以将高低电平抽象成数学语言：我们用低电平表示 ``0`` ，高电平表示 ``1`` ，这样就得到一个理想化的信道：

.. figure:: /_images/protocols/physical-layer/372a633a4d70a5044455623ad0f56a91.png

    *理想化信道*

通过信道，双方可以传递一些 ``01`` 比特流。
例子中，我们传输的比特流是 ``1111010101...`` (从右往左看)。
比特流可以编码任意信息：
比如，我们用 ``1111`` 表示告诉对方本地开机了，用 ``0000`` 告诉对方本地准备关机了。

到目前为止，我们是不是万事具备了呢？
一个比特流信道成为现实？——理论上是这样子的。
但是，现实世界往往要比理想化的模型复杂一些。

发送控制
========

.. figure:: /_images/protocols/physical-layer/8a17cc71d646cc1ef651f8979a1a7fa7.png

    *信道无穷无尽*

首先，如上图，信道是无穷无尽的。
因为，信道状态要么为 ``0`` ，要么为 ``1`` ，没有一种表示空闲的特殊状态。

.. figure:: /_images/protocols/physical-layer/d2096209ec8b549234642b9e21219d00.png

    *结尾在哪？*

举个例子，如上图， ``Server 1`` 向 ``Server 2`` 发送比特序列 ``101101001101`` (从右往左读)。
最后一个比特是 ``1`` ，对应的电平是高电平。
发送完毕后，由于没有没有其他地方改变电缆的电平，所以还是维持高电平状态。
也就是说，信道看起来还是按照既定节拍，源源不断地发送 ``1`` (灰色部分)， ``Server 2`` 怎么检测结尾在哪里？

我们可以定义一些特殊的比特序列，用于定义开头结尾： ``101010`` 表示开头， ``010101`` 表示结尾。

.. figure:: /_images/protocols/physical-layer/7e77f008253e632cce8dd8e27e160908.png

    *引入控制比特*

这时， ``Server 1`` 先发送 ``101010`` (红色)，告诉 ``Server 2`` 我要开始发数据了；
然后， ``Server 1`` 开始发送数据 ``1101011`` (黑色部分)；
最后， ``Server 1`` 发送 ``010101`` (绿色)，告诉 ``Server 2`` 数据发送完毕。
注意到，平时信道为 ``1`` (灰色)，也就是代表空闲状态。

冲突仲裁
========

如果两台服务器同时往信道里发送数据，会发生什么事情呢？

.. figure:: /_images/protocols/physical-layer/6626019fc6bba63931bc654ccef8d04f.png

    *发送冲突：两台服务器同时发送数据*

肯定冲突了嘛！一台发 ``0`` ，一台发 ``1`` ，那你说信道到底是 ``0`` 还是 ``1`` ？
那么，冲突要怎么解决呢？

解决方式也简单，只需在硬件层面实现一种机制：在检测到两台服务器同时发送数据时，及时喊停，并协商到底由哪一方先发。

总结
====

本节讨论了一个最简单的模型，解决两台服务器之间的通讯问题。
通过电缆，在两台机器间建立了一个理想的比特流传输信道。
这其实就是网络分层结构中最底层——物理层的作用：

- 传输比特流
- 依赖物理(电气)特性

这一层对开发人员来说，基本上是透明的，我们只需将其理解成一个比特流传输信道即可。
至于细节问题，高低电平啦，信号啦，各种物理特性啦，通通留给电子工程师去关心好啦！

进度
====

.. figure:: /_images/protocols/physical-layer/55477e2f396cb3ed5769a228d98e29db.png

    *新技能Get✔️*

下一步
======

下一节，我们将通过 **多服务器通讯问题** 进入 :ref:`data-link-layer` 的学习。

.. include:: /_fragments/next-step-to-wechat-mp.rst

.. include:: /_fragments/wechat-reward.rst

.. comments
    comment something out blow

    参考文献
    ========
